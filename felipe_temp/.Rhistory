install.packages('installR')
version
setwd("~/DataScience/kaggle_animal_shelter/felipe_temp")
# ------------ Load Libraries -----
library(magrittr)
library(dplyr)
library(tidyr)
library(foreign)
library(nnet)
#------- Read & Clean Data ----#
#Read Neil's file
trainPrep.df <- read.csv('../data/train_prep.csv')
train.df <- read.csv(gzfile('../data/train.csv.gz'))
#Does the pet have a name?
trainPrep.df %<>% mutate(Pet_named = ifelse(Name=="",'0','1'))
#select certain columns
trainSelected.df <- trainPrep.df %>% select(AnimalType,AgeuponOutcome_days,sex,desexed,Breed_is_mix,Pet_named,dt_month,dt_dayofweek,OutcomeType)
#------ Mutinomial Logistic Regression -----#
#divide set into training, and cross validation
library(nnet)
multi.model <- multinom(OutcomeType ~ ., data = trainSelected.df)
library(MLmetrics)
Outcome_true <- factor(trainSelected.df$OutcomeType)#,stringsAsFactors = T)
Outcome_long <- data.frame(ID=trainPrep.df$AnimalID,OutcomeTrue=Outcome_true,value=rep(1,length(Outcome_true)))
Outcome_wide <- spread(Outcome_long,OutcomeTrue,value,fill=0)
Outcome_wide <- data.matrix(Outcome_wide[,-1])
preds.matrix<- predict(multi.model,trainSelected.df[,-11],type='probs')
ix <- rowSums(is.na(preds.matrix)) == 0
preds.matrix <- preds.matrix[ix,]
Outcome_wide <- Outcome_wide[ix,]
score_multinomialreg <- MultiLogLoss(y_true = Outcome_wide, y_pred=preds.matrix)
#---- Simple Random Forest ---#
library(randomForest)
rf.model <- randomForest(OutcomeType ~ ., data = trainSelected.df[ix,],ntree=100,do.trace=10,proximity=T)
print(rf.model)
importance(rf.model)
preds.rf <- predict(rf.model,trainSelected.df[ix,-7],type = 'prob')
MultiLogLoss(y_true = Outcome_wide, y_pred=preds.rf)
score_multinomialreg <- MultiLogLoss(y_true = Outcome_wide, y_pred=preds.matrix)
install.packages(c("tidyr", "dplyr", "magrittr", "ggplot2", "shiny", "plotly", "data.table", "randomForest", "caret", "gym", "e1071", "foreign", "nnet", "MLmetrics", "lsa", "LSAfun", "xgbopo"))
library(magrittr)
library(dplyr)
library(tidyr)
library(foreign)
library(nnet)
#Read Neil's file
trainPrep.df <- read.csv('../data/train_prep.csv')
train.df <- read.csv(gzfile('../data/train.csv.gz'))
#Does the pet have a name?
trainPrep.df %<>% mutate(Pet_named = ifelse(Name=="",'0','1'))
#select certain columns
trainSelected.df <- trainPrep.df %>% select(AnimalType,AgeuponOutcome_days,sex,desexed,Breed_is_mix,Pet_named,dt_month,dt_dayofweek,OutcomeType)
#------ Mutinomial Logistic Regression -----#
#divide set into training, and cross validation
library(nnet)
multi.model <- multinom(OutcomeType ~ ., data = trainSelected.df)
library(MLmetrics)
Outcome_true <- factor(trainSelected.df$OutcomeType)#,stringsAsFactors = T)
Outcome_long <- data.frame(ID=trainPrep.df$AnimalID,OutcomeTrue=Outcome_true,value=rep(1,length(Outcome_true)))
Outcome_wide <- spread(Outcome_long,OutcomeTrue,value,fill=0)
Outcome_wide <- data.matrix(Outcome_wide[,-1])
preds.matrix<- predict(multi.model,trainSelected.df[,-11],type='probs')
ix <- rowSums(is.na(preds.matrix)) == 0
preds.matrix <- preds.matrix[ix,]
Outcome_wide <- Outcome_wide[ix,]
score_multinomialreg <- MultiLogLoss(y_true = Outcome_wide, y_pred=preds.matrix)
# --- Load Libraries -----
library(magrittr)
library(dplyr)
library(tidyr)
library(foreign)
library(nnet)
# ---- Read Data -------
#Read Neil's file
trainPrep.df <- read.csv('../data/train_prep.csv')
trainPrep.df <- read.csv('../data/train_prep.csv')
View(trainPrep.df)
head(trainPrep.df$sex)
head(trainPrep.df$sex,10)
str(trainPrep.df)
trainPrep.df %<>% replace_na(0)
names(trainPrep.df)
trainPrep.df %<>% replace_na(Name='NoName',OutcomeType='Unknown',AnimalType='Unknown')
View(trainPrep.df)
library(tidyr)
trainPrep.df %<>% replace_na(Name='',Name='NoName')
trainPrep.df %<>% replace_na(list(Name='NoName',OutcomeType='Unknown',AnimalType='Unknown'))
trainPrep.df <- read.csv('../data/train_prep.csv',stringsAsFactors = FALSE)
trainPrep.df %<>% replace_na(list(Name='NoName',OutcomeType='Unknown',AnimalType='Unknown'))
trainPrep.df$Name <- replace(trainPrep.df,"","Unknown")
trainPrep.df$Name <- replace(trainPrep.df," ","Unknown")
trainPrep.df <- read.csv('../data/train_prep.csv',stringsAsFactors = FALSE)
str(trainPrep.df)
trainPrep.df$Name <- replace(trainPrep.df,"","Unknown")
trainPrep.df <- read.csv('../data/train_prep.csv',stringsAsFactors = FALSE)
trainPrep.df$Name <- replace(trainPrep.df$Name,"","Unknown")
trainPrep.df <- read.csv('../data/train_prep.csv',stringsAsFactors = FALSE)
trainPrep.df %<>% mutate(Name=ifelse(Name=="","Unknown"))
trainPrep.df %<>% mutate(Name=ifelse(Name=="","Unknown",Name))
unique(trainPrep.df$AnimalType)
unique(trainPrep.df$Breed)
unique(trainPrep.df$Color)
unique(trainPrep.df$dt_year)
trainPrep.df %<>% replace_na(AgeuponOutcome_days=-100)
trainPrep.df <- read.csv('../data/train_prep.csv',stringsAsFactors = FALSE)
trainPrep.df %<>% replace_na(list(AgeuponOutcome_days=-100))
# --- Load Libraries -----
library(magrittr)
library(dplyr)
library(tidyr)
library(foreign)
library(nnet)
# ---- Read & clean data -------
#Read Neil's file
trainPrep.df <- read.csv('../data/train_prep.csv',stringsAsFactors = FALSE)
#fill for missing/unknown values
#to replace with 'unknown'
trainPrep.df %<>% mutate(Name=ifelse(Name=="","Unknown",Name))
trainPrep.df %<>% mutate(Name=ifelse(AgeuponOutcome=="","Unknown",AgeuponOutcome))
trainPrep.df %<>% mutate(Name=ifelse(SexuponOutcome=="","Unknown",SexuponOutcome))
trainPrep.df %<>% mutate(Name=ifelse(sex=="","Unknown",sex))
trainPrep.df %<>% mutate(Name=ifelse(desexed=="","Unknown",desexed))
#replace NAs
trainPrep.df %<>% replace_na(list(AgeuponOutcome_days=-100))
library(ggplot2)
plot.outyear <- ggplot(data=trainPrep.df,aes(x=dt_year,y=OutcomeType))
plot.outyear <- geom_bar(stat='identity')
plot.outyear
plot.outyear <- ggplot(data=trainPrep.df,aes(x=dt_year,y=OutcomeType))
plot.outyear <- plot.outyear + geom_bar(stat='identity')
plot.outyear
plot.outyear <- ggplot(data=trainPrep.df,aes(x=dt_year))
plot.outyear <- plot.outyear + geom_bar(fill=OutcomeType)
plot.outyear
plot.outyear <- ggplot(data=trainPrep.df,aes(x=dt_year))
plot.outyear <- plot.outyear + geom_bar(count,fill=OutcomeType)
plot.outyear
plot.outyear <- ggplot(data=trainPrep.df,aes(x=factor(dt_year)))
plot.outyear <- plot.outyear + geom_bar(fill=OutcomeType)
plot.outyear <- ggplot(data=trainPrep.df,aes(x=factor(dt_year)))
plot.outyear <- plot.outyear + geom_bar(fill=factor(OutcomeType))
plot.outyear <- ggplot(data=trainPrep.df,aes(x=factor(dt_year)))
plot.outyear <- plot.outyear + geom_bar(aes(fill=factor(OutcomeType)))
plot.outyear
plot.outyear <- ggplot(data=trainPrep.df,aes(x=factor(dt_year),y=..density..))
plot.outyear <- plot.outyear + geom_bar(aes(fill=factor(OutcomeType)))
plot.outyear
plot.outyear <- ggplot(data=trainPrep.df,aes(x=factor(dt_year)))
plot.outyear <- plot.outyear + geom_bar(aes(fill=factor(OutcomeType)))
plot.outyear
plot.outmonth <- ggplot(data=trainPrep.df,aes(x=factor(dt_month)))
plot.outmonth <- plot.outmonth + geom_bar(aes(fill=factor(OutcomeType)))
plot.outmonth
plot.outmonth <- ggplot(data=trainPrep.df,aes(x=factor(dt_month)))
plot.outmonth <- plot.outmonth + geom_bar(aes(fill=factor(OutcomeType)),position='fill')
plot.outmonth
plot.outday <- ggplot(data=trainPrep.df,aes(x=factor(dt_day)))
plot.outday <- plot.outmonth + geom_bar(aes(fill=factor(OutcomeType)),position='fill')
plot.outday <- plot.outmonth + labs(title='Outcome vs Day',x='Day of the week',y='Normalised count')
plot.outday <- ggplot(data=trainPrep.df,aes(x=factor(dt_day)))
plot.outday <- plot.outday + geom_bar(aes(fill=factor(OutcomeType)),position='fill')
plot.outday <- plot.outday + labs(title='Outcome vs Day',x='Day of the week',y='Normalised count')
plot.outday
plot.outday <- ggplot(data=trainPrep.df,aes(x=factor(dt_dayofweek)))
plot.outday <- plot.outday + geom_bar(aes(fill=factor(OutcomeType)),position='fill')
plot.outday <- plot.outday + labs(title='Outcome vs Day',x='Day of the week',y='Normalised count')
plot.outday
View(sort(table(trainPrep.df$Breed,desc=TRUE)))
View(table(trainPrep.df$Breed))
